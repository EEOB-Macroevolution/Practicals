Re.obs.trans <- ((2*Re.obs)-1)
if(Re.obs.trans==1){Re.obs.trans=0.999}
if(Re.obs.trans==-1){Re.obs.trans=-0.999}
Z.obs <- 0.5*log((1+Re.obs.trans) / (1-Re.obs.trans))
ZR <- Z.obs + abs(ZN)
ZR.var <- 1/(n-3)
pval <- 1-pnorm((Z.obs - (ZN))*(sqrt(n-3)))
out <- list(Re.obs = Re.obs, Z.obs = Z.obs, ZR = ZR, ZR.var = ZR.var, pval = pval)
class(out) <- "rel.eig"
out
}
x <- matrix(rnorm(1000),ncol=10)
x2 <- 10*x
Z.Vrel(x)
Z.Vrel(x2)
?geomorph:::bilat.symmetry
geomorph:::bilat.symmetry
26000+8300+6500+650+25000+6500+15000+26000+8300+10000+2600
library(geomorph)
?readland.shapes
1320*12
2100*7.5
15840*4
15840*4*.085
(15840*4*.085+63360+1279)
84593 - (15840*4*.085+63360+1279)
63360+1279+5385
121*31
121*30
121*340
1391.03/.87005
log(0)
log(1)
log(0.000001)
log(0.00000000001)
(28644-11404) / 28644
?geomorph:::gm.prcomp
devtools::install_github('geomorphR/geomorph', ref="Stable", build_vignettes = TRUE)
install.packages(c("brew", "broom", "conquer", "doParallel", "dplyr", "foreach", "generics", "geomorph", "gower", "iterators", "latex2exp", "lme4", "meta", "nloptr", "parsedate", "permute", "quantreg", "readr", "rlang", "sf", "shinyjqui", "shinyWidgets", "spatstat.geom", "spdep", "svglite", "systemfonts", "terra", "tidyr", "tiff", "units"))
devtools::install_github('geomorphR/geomorph', ref="Stable", build_vignettes = TRUE)
install.packages("phangorn")
install.packages(c("cli", "crayon", "spatstat.core", "spatstat.linnet"))
devtools::install_github('geomorphR/geomorph', ref="Stable", build_vignettes = TRUE)
library(geomorph)
library(geomorph)
lib_loc <- "C:/Users/dcadams/Documents/R/win-library/4.1"
to_install <- unname(installed.packages(lib.loc = lib_loc)[, "Package"])
to_install
install.packages(pkgs = to_install)
install.package('rgl')
install.packages('rgl')
devtools::install_github('geomorphR/geomorph', ref="Stable", build_vignettes = TRUE)
Sys.which("make")
install.packages('rgl')
lib_loc <- "C:/Users/dcadams/Documents/R/win-library/4.1"
to_install <- unname(installed.packages(lib.loc = lib_loc)[, "Package"])
to_install
install.packages(pkgs = to_install)
install.packages('rgl')
library(rgl)
library(RRPP)
rrpp.data.frame
data.frame
x <- data.frame(x=2, y=3)
class(x)
x[[1]]
x[[2]]
iris
iris$Sepal.Length
x <- data.frame(z=2, y=c(3,4))
x
?iris
iris[1,]
iris[,1]
iris[[1]]
HydromantesMns <- read.csv("C:/DeanData/Teaching/Biol-465-EEOB 565-Macroevolution/GitCourse/Practicals/Phylo_Regression/data/HydromantesMns.csv", row.names=1)
View(HydromantesMns)
View(x)
View(HydromantesMns)
hist(rnorm(1000))
hist(rnorm(1000,sd = .1))
hist(rnorm(1000))
hist(rnorm(1000),xlim = c(-4,4))
hist(rnorm(1000,sd = 0.1),xlim = c(-4,4))
library(ape)
tree <- rcoal(5)
plot(tree)
plot(rcoal(5))
plot(rcoal(5))
plot(rcoal(5))
plot(rcoal(5))
plot(rcoal(5))
tree
tree$edge
tree$edge.length
plot(tree)
tip.labels()
plot(tree,show.tip.label = FALSE)
tip.label()
tiplabels()
nodelabels()
edgelabels()
hist(rgamma(n=1000,rate=20,shape=1200))
hist(rgamma(n=1000,rate=20,shape=1200),xlim = c(0,100))
48500/1.12
2400*12*1.12
2400*15*1.12
library(mvtnorm)
Sigma <- diag(n,r)
n=200
p=10
r = 0
Sigma <- diag(p,r)
Sigma
Sigma <- diag(p)
Sigma
Sigma2 <-matrix(p,p,r)
Sigma2
r = 0.7
Sigma2 <-matrix(r, nrow = p,ncol = p)
Sigma2
Sigma2 <-matrix(r, nrow = p,ncol = p); diag(Sigma2) <- 1
x <- mvtnorm::rmvnorm(n,sigma = Sigma)
x2 <- mvtnorm::rmvnorm(n,sigma = Sigma2)
screeplot(eigen(x)$values)
screeplot(eig(x)$values)
screeplot(eig(cov(x))$values)
screeplot(eigen(cov(x))$values)
cov(x)
eigen(cov(x))
eigen(cov(x))$values
plot(eigen(cov(x))$values)
plot(eigen(cov(x2))$values)
plot(eigen(cov(diag(p))$values)
)
plot(eigen(cov(diag(p)))$values)
library(geomorph)
?trajectory.analysis
library(RRPP)
?model.comparison
data(Pupfish)
Pupfish$logSize <- log(Pupfish$CS)
fit1 <- lm.rrpp(coords ~ logSize, data = Pupfish, iter = 0,
print.progress = FALSE)
fit2 <- lm.rrpp(coords ~ Pop, data = Pupfish, iter = 0,
print.progress = FALSE)
fit3 <- lm.rrpp(coords ~ Sex, data = Pupfish, iter = 0,
print.progress = FALSE)
fit4 <- lm.rrpp(coords ~ logSize + Sex, data = Pupfish, iter = 0,
print.progress = FALSE)
fit5 <- lm.rrpp(coords ~ logSize + Pop, data = Pupfish, iter = 0,
print.progress = FALSE)
fit6 <- lm.rrpp(coords ~ logSize + Sex * Pop, data = Pupfish, iter = 0,
print.progress = FALSE)
modComp1 <- model.comparison(fit1, fit2, fit3, fit4, fit5,
fit6, type = "cov.trace")
modComp2 <- model.comparison(fit1, fit2, fit3, fit4, fit5,
fit6, type = "logLik", tol = 0.01)
summary(modComp1)
summary(modComp2)
install.packages('RRPP')
# Simulated data
library(mvtnorm)
n=300
p=2
r1 = 0.5
sigma1 <- matrix(r1,p,p); diag(sigma1) <- 1
sigma1
sigma5 <- matrix(r1,p,p); diag(sigma1) <- 1
# Simulated data
library(mvtnorm)
n=300
p=2
sigma5 <- matrix(.5,p,p); diag(sigma1) <- 1
sigma1 <- matrix(.1,p,p); diag(sigma1) <- 1
x1 <- rmvnorm(n,sigma = sigma1)
x5 <- rmvnorm(n,sigma = sigma5)
plot(x1)
plot(x5)
x1
x5
sigma5 <- matrix(.5,p,p); diag(sigma5) <- 1
sigma1 <- matrix(.1,p,p); diag(sigma1) <- 1
x1 <- rmvnorm(n,sigma = sigma1)
x5 <- rmvnorm(n,sigma = sigma5)
plot(x5)
x1 <- scale(rmvnorm(n,sigma = sigma1))
x5 <- scale(rmvnorm(n,sigma = sigma5))
plot(x5)
sigma5 <- matrix(.5,p,p); diag(sigma5) <- 1
sigma1 <- matrix(.1,p,p); diag(sigma1) <- 1
x1 <- rmvnorm(n,sigma = sigma1)
x5 <- rmvnorm(n,sigma = sigma5)
plot(x1)
plot(x5)
plot(x1,xlim = c(-4,4),ylim = c(-4,4))
plot(x5,xlim = c(-4,4),ylim = c(-4,4))
n=1000
p=2
sigma5 <- matrix(.5,p,p); diag(sigma5) <- 1
sigma1 <- matrix(.1,p,p); diag(sigma1) <- 1
x1 <- rmvnorm(n,sigma = sigma1)
x5 <- rmvnorm(n,sigma = sigma5)
plot(x1,xlim = c(-4,4),ylim = c(-4,4))
plot(x5,xlim = c(-4,4),ylim = c(-4,4))
RRPP:::ellipse.points
?RRPP:::ellipse.points
library(ellipse)
?`ellipse-package`
plot(ellipse(0.8), type = 'l')
ellipse(x1)
plot(ellipse(0.8), type = 'l')
ellipse(.5)
ellipse(x1,type = 'l')
plot(ellipse(0.5), type = 'l')
plot(ellipse(0.1), type = 'l')
library(car)
data.ellipse(x1)
dataEllipse(x1)
dataEllipse(x1,xlim = c(-4,4),ylim = c(-4,4) )
dataEllipse(x5,xlim = c(-4,4),ylim = c(-4,4) )
sigma1 <- matrix(.01,p,p); diag(sigma1) <- 1
x1 <- rmvnorm(n,sigma = sigma1)
x5 <- rmvnorm(n,sigma = sigma5)
plot(x1,xlim = c(-4,4),ylim = c(-4,4))
plot(x5,xlim = c(-4,4),ylim = c(-4,4))
dataEllipse(x1,xlim = c(-4,4),ylim = c(-4,4) )
dataEllipse(x5,xlim = c(-4,4),ylim = c(-4,4) )
plot(ellipse(0.8), type = 'l')
?dataEllipse
dataEllipse(x1,xlim = c(-4,4),ylim = c(-4,4),
xlab = FALSE)
xlab = "FALSE"")
dataEllipse(x1,xlim = c(-4,4),ylim = c(-4,4),
xlab = "")
dataEllipse(x1,xlim = c(-4,4),ylim = c(-4,4),
xlab = NULL)
ellipse(x1,xlim = c(-4,4),ylim = c(-4,4),
xlab = NULL)
dataEllipse(x1,levels = 0.95, xlim = c(-4,4),ylim = c(-4,4),
xlab = NULL)
dataEllipse(x1,levels = 0.95, xlim = c(-4,4),ylim = c(-4,4))
dataEllipse(x5,levels = 0.95,xlim = c(-4,4),ylim = c(-4,4) )
dataEllipse(x1,levels = 0.95, center.pch = FALSE, xlim = c(-4,4),ylim = c(-4,4))
dataEllipse(x1,levels = 0.95, center.pch = FALSE, col = "black",
xlim = c(-4,4),ylim = c(-4,4))
dataEllipse(x5,levels = 0.95,center.pch = FALSE, col = "black",
xlim = c(-4,4),ylim = c(-4,4) )
dataEllipse(x1,levels = 0.95, center.pch = FALSE, col = "black", plot.points = FALSE,
xlim = c(-4,4),ylim = c(-4,4))
dataEllipse(x1,levels = 0.95, center.pch = FALSE, col = "black", plot.points = FALSE,
xlim = c(-4,4),ylim = c(-4,4))
dataEllipse(x5,levels = 0.95,center.pch = FALSE, col = "black",
xlim = c(-4,4),ylim = c(-4,4) )
dataEllipse(x1,levels = 0.95, center.pch = FALSE, col = "black", plot.points = FALSE,
xlim = c(-4,4),ylim = c(-4,4))
dataEllipse(x1,levels = 0.95, center.pch = FALSE, col = "black", plot.points = FALSE,
xlim = c(-4,4),ylim = c(-4,4))
dataEllipse(x1,levels = 0.95, center.pch = FALSE, col = "black",
xlim = c(-4,4),ylim = c(-4,4))
dataEllipse(x5,levels = 0.95,center.pch = FALSE, col = "black",
xlim = c(-4,4),ylim = c(-4,4) )
dataEllipse(x1,levels = 0.95, center.pch = FALSE, col = "black", xlab = NULL,
xlim = c(-4,4),ylim = c(-4,4))
dataEllipse(x1,levels = 0.95, center.pch = FALSE, col = "black", xlab = NULL,
xlim = c(-4,4),ylim = c(-4,4))
dataEllipse(x5,levels = 0.95,center.pch = FALSE, col = "black",
xlim = c(-4,4),ylim = c(-4,4) )
dataEllipse(x1,levels = 0.95, center.pch = FALSE, col = "black", xlab = "",
xlim = c(-4,4),ylim = c(-4,4))
dataEllipse(x1,levels = 0.95, center.pch = FALSE, col = "black", xlab = "", ylab = "",
xlim = c(-4,4),ylim = c(-4,4))
dataEllipse(x1,levels = 0.95, center.pch = FALSE, col = "black", xlab = "", ylab = "",
segments = 0, xlim = c(-4,4),ylim = c(-4,4))
dataEllipse(x1,levels = 0.95, center.pch = FALSE, col = "black", xlab = "", ylab = "",
xaxt='n', xlim = c(-4,4),ylim = c(-4,4))
dataEllipse(x1,levels = 0.95, center.pch = FALSE, col = "black", xlab = "", ylab = "",
xaxt='n', yaxt='n', xlim = c(-4,4),ylim = c(-4,4))
dataEllipse(x5,levels = 0.95,center.pch = FALSE, col = "black",
xaxt='n', yaxt='n', xlim = c(-4,4),ylim = c(-4,4) )
dataEllipse(x5,levels = 0.95,center.pch = FALSE, col = "black",xlab = "", ylab = "",
xaxt='n', yaxt='n', xlim = c(-4,4),ylim = c(-4,4) )
p=5
sigma5 <- matrix(.5,p,p); diag(sigma5) <- 1
sigma1 <- matrix(.01,p,p); diag(sigma1) <- 1
x1 <- rmvnorm(n,sigma = sigma1)
x5 <- rmvnorm(n,sigma = sigma5)
plot(x1,xlim = c(-4,4),ylim = c(-4,4))
plot(x5,xlim = c(-4,4),ylim = c(-4,4))
dataEllipse(x1,levels = 0.95, center.pch = FALSE, col = "black", xlab = "", ylab = "",
xaxt='n', yaxt='n', xlim = c(-4,4),ylim = c(-4,4))
dim(x1)
dataEllipse(x1[,1:2],levels = 0.95, center.pch = FALSE, col = "black", xlab = "", ylab = "",
xaxt='n', yaxt='n', xlim = c(-4,4),ylim = c(-4,4))
dataEllipse(x5[,1:2],levels = 0.95,center.pch = FALSE, col = "black",xlab = "", ylab = "",
xaxt='n', yaxt='n', xlim = c(-4,4),ylim = c(-4,4) )
eigen(cov(x1))
val1 <- eigen(cov(x1))$values
val1
val5 <- eigen(cov(x2))$values
val5 <- eigen(cov(x5))$values
val5
sigma1 <- matrix(.1,p,p); diag(sigma1) <- 1
x1 <- rmvnorm(n,sigma = sigma1)
x5 <- rmvnorm(n,sigma = sigma5)
dataEllipse(x1[,1:2],levels = 0.95, center.pch = FALSE, col = "black", xlab = "", ylab = "",
xaxt='n', yaxt='n', xlim = c(-4,4),ylim = c(-4,4))
dataEllipse(x5[,1:2],levels = 0.95,center.pch = FALSE, col = "black",xlab = "", ylab = "",
xaxt='n', yaxt='n', xlim = c(-4,4),ylim = c(-4,4) )
val1 <- eigen(cov(x1))$values
val5 <- eigen(cov(x5))$values
val1
val5
plot(val1)
val1
val1/max(val1)
val1 <- val1/max(val1)
val1 <- val1/max(val1)
val5 <- val5 / max(val5)
plot(val1)
plot(val5)
sigma1 <- matrix(.01,p,p); diag(sigma1) <- 1
x1 <- rmvnorm(n,sigma = sigma1)
x5 <- rmvnorm(n,sigma = sigma5)
dataEllipse(x1[,1:2],levels = 0.95, center.pch = FALSE, col = "black", xlab = "", ylab = "",
xaxt='n', yaxt='n', xlim = c(-4,4),ylim = c(-4,4))
dataEllipse(x5[,1:2],levels = 0.95,center.pch = FALSE, col = "black",xlab = "", ylab = "",
xaxt='n', yaxt='n', xlim = c(-4,4),ylim = c(-4,4) )
val1 <- eigen(cov(x1))$values
val5 <- eigen(cov(x5))$values
val1 <- val1/max(val1)
val5 <- val5 / max(val5)
plot(val1)
plot(val5)
plot(val1, ylim = c(0,1))
plot(val5, ylim = c(0,1))
plot(val1, ylim = c(0,1))
lines(val1)
plot(val5, ylim = c(0,1))
lines(val5)
library(geomorph)
?plot.gm.prcomp
data(plethspecies)
Y.gpa <- gpagen(plethspecies$land)    #GPA-alignment
###  Traditional PCA
PCA <- gm.prcomp(Y.gpa$coords)
summary(PCA)
plot(PCA$sdev)
plot(PCA$sdev/max(PCA$sdev))
cov(two.d.array(Y.gpa$coords))
cov(two.d.array(Y.gpa$coords))*10e5
cov(two.d.array(Y.gpa$coords))*10e3
cov(two.d.array(Y.gpa$coords))*10e4
cor(two.d.array(Y.gpa$coords))
mean(cor(two.d.array(Y.gpa$coords)))
lower.tri(cor(two.d.array(Y.gpa$coords)))
lower.tri(cor(two.d.array(Y.gpa$coords)))
cor(two.d.array(Y.gpa$coords)) -> cor.dat
cor.dat(lower.tri(cor.dat))
cor.dat[lower.tri(cor.dat)]
dim(cor.dat)
length(cor.dat)
mean(cor.dat[lower.tri(cor.dat)])
sigma5 <- matrix(rnorm(mean = .5,sd = .1),p,p); diag(sigma5) <- 1
sigma5 <- matrix(rnorm(n=1,mean = .5,sd = .1),p,p); diag(sigma5) <- 1
sigma5
n=1000
p=2
sigma5 <- matrix(.5,p,p); diag(sigma5) <- 1
sigma1 <- matrix(.01,p,p); diag(sigma1) <- 1
x1 <- rmvnorm(n,sigma = sigma1)
x5 <- rmvnorm(n,sigma = sigma5)
dataEllipse(x1[,1:2],levels = 0.95, center.pch = FALSE, col = "black", xlab = "", ylab = "",
xaxt='n', yaxt='n', xlim = c(-4,4),ylim = c(-4,4))
dataEllipse(x5[,1:2],levels = 0.95,center.pch = FALSE, col = "black",xlab = "", ylab = "",
xaxt='n', yaxt='n', xlim = c(-4,4),ylim = c(-4,4) )
dataEllipse
dataEllipse(x5[,1:2],levels = 0.95,center.pch = FALSE, col = "black",xlab = "", ylab = "",
xaxt='n', yaxt='n', xlim = c(-4,4),ylim = c(-4,4),
lines = FALSE)
dataEllipse(x1[,1:2],levels = 0.95, center.pch = FALSE, col = "black", xlab = "", ylab = "",
xaxt='n', yaxt='n', xlim = c(-4,4),ylim = c(-4,4), grid = FALSE)
dataEllipse(x5[,1:2],levels = 0.95,center.pch = FALSE, col = "black",xlab = "", ylab = "",
xaxt='n', yaxt='n', xlim = c(-4,4),ylim = c(-4,4),grid = FALSE )
val1 <- eigen(cov(x1))$values
val5 <- eigen(cov(x5))$values
plot(val1, ylim = c(0,5))
lines(val1)
plot(val5, ylim = c(0,5))
lines(val5)
cor5 <- rnorm(n=(p*(p-1)/2),mean = .5)
cor5
cor5 <- rnorm(n=10,mean = .5)
cor5
cor5 <- rnorm(n=10,mean = .5, sd = 0.1)
cor5
## ----read_data----
library(geiger, warn.conflicts=F, quietly=T) #also loads ape
library(phytools, warn.conflicts=F, quietly=T)
tree<-read.tree("../data/tree.64.tre",tree.names=T)
setwd("C:/DeanData/Teaching/Biol-465-EEOB 565-Macroevolution/GitCourse/Practicals/Phylo_Assoc_Discrete/scripts")
tree<-read.tree("../data/tree.64.tre",tree.names=T)
mydata<-read.csv('../data/DiscreteData.csv', row.names=1, header=TRUE)
View(mydata)
#Match data with tree
data.pruned<-treedata(phy=tree,data = mydata, warnings=FALSE)
tree<-data.pruned$phy
mydata<-data.pruned$data
plot.phylo(tree,show.tip.label = F) ## setting show.tip.label = F prevents the species names from appearing
plot.phylo(tree,show.tip.label = T) ## setting show.tip.label = F prevents the species names from appearing
plot.phylo(tree,show.tip.label = F) ## setting show.tip.label = F prevents the species names from appearing
View(mydata)
## We make a colour key to denote which state gets which color
colorkey1 <- c('red','black') ##trait V1
colorkey2 <- c('green','orange') ##trait V3
names(colorkey1) <-c(0,1) ##Here we are saying that 0s get red and 1s get black
names(colorkey2) <-c(0,1) ##Here we are saying that 0s get green and 1s get orange
V1cols<-colorkey1[as.character(mydata[,1])] ##putting the trait values in as.character() is important!
V3cols<-colorkey2[as.character(mydata[,3])]
tiplabels(pch = 17,col = V1cols,cex=0.6)
tiplabels(pch = 19,col = V3cols,offset = 0.2,cex=0.6)
## ----single_trait----
library(corHMM)
plot.phylo(tree,show.tip.label = F)
tiplabels(pch = 17,col = V1cols)
#Set up data. corHMM is picky about how it wants the data formatted
trt1<-cbind(row.names(mydata),mydata[,1])
View(trt1)
## ----single_trait_plot
trait1_model_er
trait1_model_ard
plotMKmodel(trait1_model_er$rate.mat,rate.cat = 1)
#Set up data. corHMM is picky about how it wants the data formatted
trt1<-cbind(row.names(mydata),mydata[,1])
#Set up initial rate matrices
trait1_model_er <- getStateMat4Dat(trt1,"ER")  #equal transition rates
trait1_model_ard <- getStateMat4Dat(trt1,"ARD")  #All rates different
## ----single_trait_plot
trait1_model_er
trait1_model_ard
plotMKmodel(trait1_model_er$rate.mat,rate.cat = 1)
plotMKmodel(trait1_model_ard$rate.mat,rate.cat = 1)
#Fit models: TRAIT 1
trait1_fit_er <-corHMM(phy = tree, data = trt1, rate.cat = 1, rate.mat = trait1_model_er$rate.mat)
trait1_fit_ard <-corHMM(phy = tree, data = trt1, rate.cat = 1, rate.mat = trait1_model_ard$rate.mat)
##The estimated rates
trait1_fit_er$solution
trait1_fit_ard$solution
#compare models: logL and AIC
trait1_fit_er$loglik
trait1_fit_ard$loglik
##We can formally perform a likelihood ratio test of nested models by doing the following
summary_stat <- -2 * (trait1_fit_er$loglik - trait1_fit_ard$loglik) ## -2 * (model_constrained - model_full)
##This is our p-value
pchisq(summary_stat,df = 1,lower.tail=FALSE ) ##degrees of freedom is the difference in the number of parameters between the two models. In our case 2-1=1
trait1_fit_er$AIC
trait1_fit_ard$AIC
##first plot the data
V1cols<-colorkey1[as.character(mydata[,1])] ##putting the trait values in as.character() is important!
V2cols<-colorkey2[as.character(mydata[,2])]
plot(tree,show.tip.label = F)
tiplabels(pch = 17,col = V1cols)
tiplabels(pch = 19,col = V2cols,offset = 0.2)
##we set up the same format of data frame as before but now we include two traits: trait 1 and trait 2
trtset12<-cbind(row.names(mydata),mydata[,1:2])
trait12_model_er <- getStateMat4Dat(trtset12,"ER")  #equal transition rates
trait12_model_ard <- getStateMat4Dat(trtset12,"ARD")  #All rates different
trait12_model_er
trait12_model_ard
trtset1
trtset12
trait12_model_er <- getStateMat4Dat(trtset12,"ER")  #equal transition rates
trait12_model_ard <- getStateMat4Dat(trtset12,"ARD")  #All rates different
trait12_model_er
trait12_model_ard
##coax the full transition matrix by having a data frame with all trait combinations
## First get all the unique states for the traits in question
states1<-unique(mydata[,1])
states2<-unique(mydata[,2])
traits12_expanded<-expand.grid('species',states1,states2) ##Having some string at the beginning is important! Our data needs the first column to be populated with names, this achieves that
##try making matrices again
trait12_model_er <- getStateMat4Dat(traits12_expanded,"ER")  #equal transition rates
trait12_model_ard <- getStateMat4Dat(traits12_expanded,"ARD")  #All rates different
##The full transition matrix. Hot dog!
trait12_model_er
trait12_model_ard
plotMKmodel(trait12_model_er$rate.mat,rate.cat = 1)
plotMKmodel(trait12_model_ard$rate.mat,rate.cat = 1)
## ----two_trait_pagel-----
tr1<-mydata[,1]; names(tr1)<-row.names(mydata)
tr2<-mydata[,2]; names(tr2)<-row.names(mydata)
pagel_fit <- fitPagel(tree,x=tr1,y=tr2)
pagel_fit
##We will use the ER transition matrix as a starting point for our directional model
trait_model_dir<-trait_model_er
trait_model_er
trait_model_er <- getStateMat4Dat(traits12_expanded,"ER")  #Transition matrix with equal transition rates for to two binary traits
##We will use the ER transition matrix as a starting point for our directional model
trait_model_dir<-trait_model_er
trait_model_er
##Give some of the transitions their own rate
trait_model_dir$rate.mat[1,2]<-2
trait_model_dir$rate.mat[3,4]<-3
trait_model_dir
traits34<-cbind(row.names(mydata),mydata[,3:4])
trait34_fit_er  <-corHMM(phy = tree, data = traits34, rate.cat = 1, rate.mat = trait_model_er$rate.mat)
trait34_fit_dir <-corHMM(phy = tree, data = traits34, rate.cat = 1, rate.mat = trait_model_dir$rate.mat)
trait34_fit_er$loglik
trait34_fit_dir$loglik
trait34_fit_er$AIC
trait34_fit_dir$AIC ##Strong preference for trait34_fit_dir
trait34_fit_dir
