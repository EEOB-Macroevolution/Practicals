library(phytools)
library(geiger)
######Discrete Anc. State Estimation
## Read data & tree
tree<-read.tree("../data/anole.gp.tre",tree.names=T)
group<-read.csv('../data/anole.gp.csv', row.names=1)
gp<-as.factor(t(group)); names(gp)<-row.names(group)
#Plot
plot(tree,type="fan")
cols<-setNames(palette()[1:length(unique(gp))],sort(unique(gp)))
tiplabels(pie=model.matrix(~gp-1),piecol=cols,cex=0.3)
add.simmap.legend(colors=cols,prompt=FALSE,x=0.9*par()$usr[1],
y=-max(nodeHeights(tree)),fsize=0.8)
library(castor)
gp.int<-as.numeric(gp); names(gp.int)<-names(gp)
anc.mp <- asr_max_parsimony(tree,gp.int)
#Plot
plot(tree, type="fan")
cols<-setNames(palette()[1:length(unique(gp.int))],sort(unique(gp.int)))
tiplabels(pie=model.matrix(~as.factor(gp.int)-1),piecol=cols,cex=0.3)
nodelabels(node=1:tree$Nnode+Ntip(tree),
pie=anc.mp$ancestral_likelihoods,piecol=cols,cex=0.3)
add.simmap.legend(colors=cols,prompt=FALSE,x=0.9*par()$usr[1],
y=-max(nodeHeights(tree)),fsize=0.8)
library(corHMM)
##Create the model for trait evolution
group_formatted<-cbind(row.names(group),group[,1]) ##put the data in a specific format because the function is picky
group_model_er <- getStateMat4Dat(group_formatted,"ER")  #equal transition rates
plotMKmodel(group_model_er$rate.mat,rate.cat = 1)
##Perform ancestral character estimation
anc.ML<-ace(x = group$x, phy = tree,
type = "discrete", method = 'ML',
model = group_model_er$rate.mat)
anc.ML ## we can see a lot of information just by calling our object
## We can see the probability of each state here, just the first few internal nodes will be shown
round(head(anc.ML$lik.anc),3)
# We can plot the ancestral character estimates with the nodelabels() function
colorkey <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2") ##A colorblind friendly color palette
names(colorkey) <- colnames(anc.ML$lik.anc) ##assign each character state a color
tip_cols<-colorkey[as.character(group$x)] ##putting the trait values in as.character() is important!
plot(tree,type="fan")
nodelabels(pie=anc.ML$lik.anc,piecol=colorkey,cex=0.5)
tiplabels(pch=19,col=tip_cols)
legend(x='bottomleft',legend = names(colorkey),fill=colorkey)
## ---- simmap ----
# simulate single stochastic character map using empirical Bayes method
gp<-setNames(group$x,rownames(group)) ##make.simmap needs a named vector for the data.
tree.smp1<-make.simmap(tree,gp,model=group_model_er$rate.mat)
plot(tree.smp1,colorkey,type="fan")  #one run.  Not overly useful.
#Must do many times
tree.smp<-make.simmap(tree,gp,model=group_model_er$rate.mat,nsim=100)
anc.smp<-summary(tree.smp,plot=FALSE)
plot(anc.smp, type="fan", fsize=0.8,ftype="i")
rm(list = ls())
#Data from Mahler et al. 2010. Evolution
tree<-read.tree("../data/anole.svl.tre",tree.names=T)
cont_data<-read.csv('../data/anole.svl.csv', row.names=1)
## -----anc_est_cont-----
anc.cont.ML<-fastAnc(tree,cont_data$svl,vars=TRUE,CI=TRUE)
#anc.cont.ML #This would show us the estimate and 95% CI for each internal node
anc.cont.ML$ace  #ancestral estimates
#PLOT as color map
cont_data_vect<-setNames(cont_data$svl,rownames(cont_data)) ##contMap needs a named vector for the data.
tree.col<-contMap(tree,cont_data_vect,plot=FALSE)  #runs Anc. St. Est. on branches of tree
plot(tree.col,type="fan")
#using 'ace' function in APE
anc.cont.ML2<-ace(x=cont_data_vect,phy=tree, type="continuous", method="ML")
plot(tree.col,type="fan")
plot(tree.col,type="fan")
plot(tree.col)
plot(tree.col,type="fan",cex.legend=.75)
plot(tree.col,type="fan",cex.legend=.5)
plot(tree.col,type="fan",cex.legend=.75)
plot(tree.col,type="fan")
plot(tree.col,type="fan", cex.lab = 0.5)
plot(tree.col,type="fan", legend=0.5)
plot(tree.col,type="fan", leg.text = c("log(SVL)"))
plot(tree.col,type="fan", leg.text = "log(SVL)")
plot(tree.col,type="fan", fsize=c(0.6,1))
plot(tree.col,type="fan")
?plotTree
plotTree(tree.col,type="fan")
?plot
?ape
